#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

#define vi vector<int>
#define vl vector< long long >

vi low ;
vi up ;
vl sz ;
vector<pair<long long, long long > > range;


class UnionOfIntervals {
public:
	int nthElement(vector <int> lowerBound, vector <int> upperBound, int n) {
		
		//low = lowerBound ; 
		//up = upperBound ;
		
		sz = vl ( lowerBound.size() , 0 ) ;
		
		for ( int i = 0 ; i < lowerBound.size() ; i ++ ) {
			long long l = lowerBound[ i ] ; 
			long long u = upperBound[ i ] ;
			pair<long long , long long > tmp;
			
			tmp.first = l;
			tmp.second = u ;
			range.push_back( tmp ) ;
		}
		
		sort( range.begin() , range.end() );
		
		for ( int i = 0 ; i < range.size() ; i ++ ) {	
			sz[ i ] = ( range[i].second - range[i].first ) + 1;
		}
		
		long long lower = LONG_MAX ;
		long long higher = 0 ;
		
		for ( int i = 0 ; i < range.size() ; i ++ ) {
			lower = min ( lower , range[i].first);
			higher = max ( higher , range[i].second);
		} 
		
		/*for ( int i = 0 ; i < range.size() ; i ++ ) {
			cerr<<range[i].first<<" "<<range[i].second<<endl;
		}*/
		
		cerr<<lower<<" "<<higher<<endl;
		while ( lower < higher ) {
			
			//cerr<<lower<<" "<<higher<<endl;
			
			long long mid = lower + ( higher - lower + 1 ) / 2;
			
			if ( p( n , mid ) ) {
				higher = mid - 1;
			}
			
			else lower = mid ;
		}
		
		return lower ;
						
	}
	
	bool p ( long long n , long long mid ) {
		
		long long cur = 0 ;
		
		for ( int i = 0 ; i < range.size() ; i ++ ) {
			
			if ( mid < range[i].first ) {
				cur += 0 ;
				continue ;
			}
			
			if( mid >= range[i].first && mid <= range[i].second ) {
				cur += mid - range[i].first;
				continue ;
			}
			
			else {
				cur += sz[ i ];
			}
		}
		
		if ( cur > n ) {
				return true ;
		}
		
		return false ;
	}
			
			
		
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	UnionOfIntervals *obj;
	int answer;
	obj = new UnionOfIntervals();
	clock_t startTime = clock();
	answer = obj->nthElement(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	int t0[] = {1,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {3,7};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4;
	p3 = 6;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {4,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = 3;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {-1500000000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1500000000};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1500000091;
	p3 = 91;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!